name: Build
on: [push, pull_request, workflow_dispatch]

jobs:
  iOS:
    name: iOS - Deploy to TestFlight
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri
          cache-all-crates: true
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun i --frozen-lockfile
      - name: Install private API key P8
        env:
          PRIVATE_API_KEY_BASE64: ${{ secrets.PRIVATE_API_KEY_BASE64 }}
          API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Build iOS
        env:
          APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
          IOS_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
          IOS_MOBILE_PROVISION: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY_PATH: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
        run: bun run tauri ios build --export-method app-store-connect
      - name: Upload to TestFlight
        run: xcrun altool --upload-app --type ios --file "./src-tauri/gen/apple/build/arm64/shrinkwrap.ipa" --apiKey ${{ secrets.APPLE_API_KEY_ID }} --apiIssuer ${{ secrets.APPLE_API_ISSUER }}
      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          path: src-tauri/gen/apple/build/arm64/shrinkwrap.ipa
          name: shrinkwrap.ipa
  # macOS:
  #   name: macOS - Deploy to TestFlight
  #   runs-on: macos-15
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: apple-actions/import-codesign-certs@v3
  #       with:
  #         p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         p12-password: ${{ secrets.P12_PASSWORD }}
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: latest-stable
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: x86_64-apple-darwin
  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         workspaces: |
  #           src-tauri
  #         cache-all-crates: true
  #     - uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest
  #     - name: Install dependencies
  #       run: bun i
  #     - name: Install private API key P8
  #       env:
  #         PRIVATE_API_KEY_BASE64: ${{ secrets.PRIVATE_API_KEY_BASE64 }}
  #         API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
  #       run: |
  #         mkdir -p ~/private_keys
  #         echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8
  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         MAC_INSTALL_BASE64: ${{ secrets.MAC_INSTALLER }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         MACOS_PROVISION_BASE64: ${{ secrets.MACOS_PROVISION_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         MAC_DIST_CERT_PATH=$RUNNER_TEMP/mac_installer.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #         # import certificate and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
  #         echo -n "$MAC_INSTALL_BASE64" | base64 --decode -o $MAC_DIST_CERT_PATH
  #         echo -n "$MACOS_PROVISION_BASE64" | base64 --decode -o $PP_PATH

  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security import $MAC_DIST_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH

  #         # apply provisioning profile
  #         sudo mkdir -p /Users/alex/Library/MobileDevice/ProvisioningProfiles
  #         sudo cp $PP_PATH /Users/alex/Library/MobileDevice/ProvisioningProfiles
  #     - name: Build macOS
  #       env:
  #         APPLE_DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
  #         IOS_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         IOS_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         APPLE_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         APPLE_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         MACOS_PROVISION: ${{ secrets.MACOS_PROVISION_BASE64 }}
  #         APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
  #         APPLE_API_KEY: ${{ secrets.APPLE_API_KEY_ID }}
  #         APPLE_API_KEY_PATH: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
  #       run: bun run tauri build --bundles app --target universal-apple-darwin
  #     - name: Sign macOS app and create .pkg
  #       run: xcrun productbuild --sign ${{ secrets.MAC_INSTALL }} --component 'src-tauri/target/universal-apple-darwin/release/bundle/macos/shrinkwrap.app' /Applications "shrinkwrap.pkg"
  #     - name: Upload to TestFlight
  #       run: xcrun altool --upload-app --type macos --file "shrinkwrap.pkg" --apiKey ${{ secrets.APPLE_API_KEY_ID }} --apiIssuer ${{ secrets.APPLE_API_ISSUER }}
